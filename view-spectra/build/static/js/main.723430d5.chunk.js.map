{"version":3,"sources":["components/PlotSpectrum.jsx","components/SpectrumInput.js","components/PlotInput.jsx","components/App.js","reportWebVitals.js","index.js"],"names":["funcNormalizeSpec","peaks","intensityMax","Math","max","apply","map","p","PlotSpectrum","props","refPlot","useRef","React","useState","stateEmpty","setEmpty","useEffect","plotData","data","dataClean","height","parseFloat","width","specA","precursorMz","specB","funcCleanPeaks","length","peaks_clean","peaksArray","split","filter","n","trim","forEach","peak","peak_array","match","push","reduce","result","cur","index","pop","funcCleanData","plotHeight","plotWidth","precursorMzA","precursorMzB","peaksA","peaksB","then","Plotly","spectrumUp","spectrumDown","plotComparisonSpec","plotAllPeaks","x0","x1","y0","y1","line","color","type","xMax","yMin","yMax","x","y","hovertemplate","showlegend","mode","hoverlabel","bgcolor","marker","size","isNaN","dash","layout","xaxis","title","text","range","yaxis","hovermode","shapes","margin","l","r","b","t","pad","config","responsive","scrollZoom","displaylogo","modeBarButtonsToRemove","toImageButtonOptions","format","filename","scale","current","newPlot","funcPlotSpectrum","hidden","justify","align","style","ref","SpectrumInput","span","value","stateSpectrum","onChange","e","setSpectrum","target","TextArea","rows","PlotInput","stateData","setData","stateSpectrum1","setSpectrum1","stateSpectrum2","setSpectrum2","plain","marginTop","marginBottom","precision","step","min","App","window","innerWidth","statePlotData","setPlotData","md","sm","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.723430d5.chunk.js","sourcesContent":["import React, {useEffect, useRef} from 'react';\r\nimport {Row, Col} from 'antd';\r\n\r\nconst funcCleanData = (data) => {\r\n    let dataClean = {\r\n        height: parseFloat(data.height) || 400,\r\n        width: parseFloat(data.width) || 600,\r\n        specA: {\r\n            precursorMz: parseFloat(data.specA.precursorMz) || null,\r\n            peaks: null\r\n        },\r\n        specB: {\r\n            precursorMz: parseFloat(data.specB.precursorMz) || null,\r\n            peaks: null\r\n        }\r\n    }\r\n\r\n    const funcCleanPeaks = (peaks) => {\r\n        if (peaks && peaks.length > 0) {\r\n            let peaks_clean = []\r\n            // Determine the line number\r\n            let peaksArray = peaks.split(/\\r\\n|\\r|\\n/).filter(n => n.trim())\r\n            if (peaksArray.length > 1) {\r\n                // Multiple lines, each line is a peak\r\n                peaksArray.forEach(peak => {\r\n                    let peak_array = []\r\n                    peak.match(/\\d+\\.*\\d*/g).forEach(peak => {\r\n                        peak_array.push(parseFloat(peak))\r\n                    })\r\n                    if (peak_array.length >= 2) {\r\n                        peaks_clean.push([peak_array[0], peak_array[1]])\r\n                    }\r\n                })\r\n            } else {\r\n                // Single line, each peak is separated by some characters\r\n                // Extract peaks\r\n                peaks.match(/\\d+\\.*\\d*/g).forEach(peak => {\r\n                    peaks_clean.push(parseFloat(peak))\r\n                })\r\n\r\n                // Sort peaks\r\n                peaks_clean = peaks_clean.reduce((result, cur, index) => {\r\n                    if (index % 2 === 0) {\r\n                        result.push([cur])\r\n                    } else {\r\n                        result[result.length - 1].push(cur)\r\n                    }\r\n                    return result\r\n                }, [])\r\n            }\r\n\r\n            // If last peak is not complete, remove it\r\n            if ((peaks_clean[peaks_clean.length - 1] || []).length < 2) {\r\n                peaks_clean.pop()\r\n            }\r\n\r\n            if (peaks_clean.length > 0) {\r\n                return peaks_clean\r\n            } else {\r\n                return null\r\n            }\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    dataClean.specA.peaks = funcCleanPeaks(data.specA.peaks || null) || null\r\n    dataClean.specB.peaks = funcCleanPeaks(data.specB.peaks || null) || null\r\n    return dataClean\r\n};\r\n\r\nconst funcNormalizeSpec = (peaks) => {\r\n    const intensityMax = Math.max.apply(Math, peaks.map((p) => p[1]))\r\n    if (intensityMax > 0) {\r\n        peaks = peaks.map(p => [p[0], p[1] / intensityMax])\r\n    }\r\n    return peaks\r\n}\r\n\r\nconst funcPlotSpectrum = (refPlot, plotData) => {\r\n    const plotHeight = plotData.height || 400;\r\n    const plotWidth = plotData.width || 600;\r\n    const precursorMzA = plotData.specA.precursorMz\r\n    const precursorMzB = plotData.specB.precursorMz\r\n    const peaksA = plotData.specA.peaks\r\n    const peaksB = plotData.specB.peaks\r\n\r\n    import('plotly.js').then(Plotly => {\r\n        //console.log(spectrum, precursor_mz)\r\n        let spectrumUp, spectrumDown\r\n        let plotComparisonSpec;\r\n        if (peaksB) {\r\n            plotComparisonSpec = true\r\n            spectrumUp = funcNormalizeSpec(peaksA)\r\n            spectrumDown = funcNormalizeSpec(peaksB)\r\n        } else {\r\n            plotComparisonSpec = false\r\n            spectrumUp = peaksA\r\n        }\r\n        let plotAllPeaks = []\r\n\r\n        // Add peaks to plot\r\n        for (let peak of spectrumUp) {\r\n            plotAllPeaks.push({\r\n                x0: peak[0], x1: peak[0],\r\n                y0: 0, y1: peak[1],\r\n                line: {color: \"#8884d8\", width: 1}, type: 'line'\r\n            })\r\n        }\r\n        let data = [{\r\n            x: spectrumUp.map((x) => x[0]),\r\n            y: spectrumUp.map((x) => x[1]),\r\n            hovertemplate: \"m/z: %{x}<br>\" +\r\n                \"Intensity: %{y}<extra></extra>\", showlegend: false,\r\n            mode: 'markers', type: 'scatter',\r\n            hoverlabel: {bgcolor: \"#FFF\"}, marker: {color: \"#8884d8\", size: 0.1},\r\n        }]\r\n\r\n        if (plotComparisonSpec) {\r\n            for (let peak of spectrumDown) {\r\n                plotAllPeaks.push({\r\n                    x0: peak[0], x1: peak[0],\r\n                    y0: 0, y1: -peak[1],\r\n                    line: {color: \"#d88484\", width: 1}, type: 'line'\r\n                })\r\n            }\r\n            data.push(\r\n                {\r\n                    x: spectrumDown.map((x) => x[0]),\r\n                    y: spectrumDown.map((x) => -x[1]),\r\n                    hovertemplate: \"m/z: %{x}<br>Intensity: %{y}<extra></extra>\",\r\n                    showlegend: false, mode: 'markers', type: 'scatter',\r\n                    hoverlabel: {bgcolor: \"#FFF\"}, marker: {color: \"#8884d8\", size: 0.1},\r\n                }\r\n            )\r\n        }\r\n\r\n        // Calculate figure's size\r\n        let xMax, yMin, yMax\r\n        if (plotComparisonSpec) {\r\n            xMax = 1.05 * Math.max(...(spectrumUp.map(x => x[0])), ...(spectrumDown.map(x => x[0])),\r\n                precursorMzA, precursorMzB)\r\n            yMax = 1.2\r\n            yMin = -1.2\r\n        } else {\r\n            xMax = 1.05 * Math.max(...(spectrumUp.map(x => x[0])), precursorMzA)\r\n            yMax = 1.2 * Math.max(...(spectrumUp.map(x => x[1])))\r\n            yMin = 0\r\n        }\r\n\r\n        // Add precursor ion\r\n        if (precursorMzA && !isNaN(precursorMzA)) {\r\n            plotAllPeaks.push({\r\n                x0: precursorMzA, x1: precursorMzA,\r\n                y0: 0, y1: yMax,\r\n                type: 'line', line: {color: 'black', width: 1, dash: 'dot'}\r\n            })\r\n        }\r\n        if (precursorMzB && !isNaN(precursorMzB)) {\r\n            plotAllPeaks.push({\r\n                x0: precursorMzB, x1: precursorMzB,\r\n                y0: 0, y1: yMin,\r\n                type: 'line', line: {color: 'black', width: 1, dash: 'dot'}\r\n            })\r\n        }\r\n\r\n        // Set layout\r\n        let layout = {\r\n            xaxis: {title: {text: 'm/z',}, range: [0, xMax]},\r\n            yaxis: {title: {text: 'Intensity',}, range: [yMin, yMax]},\r\n            hovermode: \"closest\",\r\n            shapes: plotAllPeaks,\r\n            margin: {l: 55, r: 10, b: 30, t: 10, pad: 0},\r\n        };\r\n        if (plotComparisonSpec) {\r\n            layout.yaxis.title.text = 'Normalized intensity'\r\n        }\r\n        layout.height = plotHeight\r\n        layout.width = plotWidth\r\n        let config = {\r\n            responsive: true,\r\n            scrollZoom: true,\r\n            displaylogo: false,\r\n            modeBarButtonsToRemove: ['select2d', 'lasso2d', 'zoomIn2d', 'zoomOut2d', 'autoScale2d', 'zoom2d', 'pan2d'],\r\n            toImageButtonOptions: {\r\n                format: 'svg', // one of png, svg, jpeg, webp\r\n                filename: 'spectrum',\r\n                height: plotHeight,\r\n                width: plotWidth,\r\n                scale: 1 // Multiply title/legend/axis/canvas sizes by this factor\r\n            }\r\n        }\r\n\r\n        if (refPlot.current) {\r\n            //console.log(data,layout,config)\r\n            Plotly.newPlot(refPlot.current, data, layout, config);\r\n        }\r\n    })\r\n}\r\n\r\nconst PlotSpectrum = (props) => {\r\n    const refPlot = useRef(null)\r\n    const [stateEmpty, setEmpty] = React.useState(false)\r\n\r\n\r\n    useEffect(() => {\r\n        const plotData = funcCleanData(props.data)\r\n        // console.log(refPlot.current, plotData, plotData.specA, plotData.specA.peaks)\r\n        if (plotData && plotData.specA && plotData.specA.peaks) {\r\n            setEmpty(false)\r\n            funcPlotSpectrum(refPlot, plotData)\r\n        } else {\r\n            setEmpty(true)\r\n        }\r\n    }, [props.data])\r\n\r\n    return (\r\n        <div>\r\n            <div hidden={!stateEmpty}>\r\n                <Row justify=\"space-around\" align={\"middle\"} style={{height: \"600px\"}}>\r\n                    <Col>\r\n                        <h1>Input the spectral data to visual it.</h1>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n            <div hidden={stateEmpty} ref={refPlot}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlotSpectrum","import {Row, Col, Input} from 'antd';\r\n\r\n\r\nconst SpectrumInput = (props) => {\r\n    return <>\r\n        <Row justify={\"left\"}>\r\n            <Col span={8}>\r\n                Precursor m/z:\r\n            </Col>\r\n            <Col span={16}>\r\n                <Input\r\n                    value={props.stateSpectrum.precursorMz}\r\n                    onChange={(e) => props.setSpectrum({...props.stateSpectrum, precursorMz: e.target.value})}\r\n                    style={{width: \"100px\"}}/>\r\n            </Col>\r\n        </Row>\r\n        <Row justify={\"left\"}>\r\n            <Col span={8}>\r\n                Peaks:\r\n            </Col>\r\n            <Input.TextArea\r\n                rows=\"9\"\r\n                value={props.stateSpectrum.peaks}\r\n                onChange={(e) => props.setSpectrum({...props.stateSpectrum, peaks: e.target.value})}/>\r\n        </Row>\r\n    </>\r\n}\r\n\r\nexport default SpectrumInput;","import {Row, Col, InputNumber, Divider} from 'antd';\r\nimport {useState, useEffect} from 'react';\r\nimport SpectrumInput from \"./SpectrumInput\";\r\n\r\n\r\nconst PlotInput = (props) => {\r\n    const stateData = props.stateData;\r\n    const setData = props.setData;\r\n    const [stateSpectrum1, setSpectrum1] = useState({precursorMz: null, peaks: \"\"});\r\n    const [stateSpectrum2, setSpectrum2] = useState({precursorMz: null, peaks: \"\"});\r\n\r\n    useEffect(() => {\r\n        setSpectrum1({\r\n            precursorMz: 179.0697,\r\n            peaks: \"133.0648\\t19.463591\\n151.0754\\t8.644951\\n155.9745\\t3.628786\\n161.0597\\t100\"\r\n        })\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setData({\r\n            ...stateData,\r\n            specA: stateSpectrum1,\r\n            specB: stateSpectrum2\r\n        }) // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [stateSpectrum1, stateSpectrum2])\r\n\r\n\r\n    return <>\r\n        <SpectrumInput stateSpectrum={stateSpectrum1} setSpectrum={setSpectrum1}/>\r\n        <Divider plain style={{marginTop: \"8px\", marginBottom: \"8px\"}}>Tail spectrum (optional)</Divider>\r\n        <SpectrumInput stateSpectrum={stateSpectrum2} setSpectrum={setSpectrum2}/>\r\n        <Divider plain style={{marginTop: \"8px\", marginBottom: \"8px\"}}>Plot size</Divider>\r\n        <Row justify={\"center\"}>\r\n            <Col span={11}>Height (px): <InputNumber\r\n                precision={0}\r\n                step={50} min={50}\r\n                value={stateData.height}\r\n                onChange={(e) => setData({...stateData, height: e})}/></Col>\r\n            <Col span={11}>Weight (px): <InputNumber\r\n                precision={0}\r\n                step={50} min={50}\r\n                value={stateData.width}\r\n                onChange={(e) => setData({...stateData, width: e})}/></Col>\r\n        </Row>\r\n    </>\r\n}\r\n\r\nexport default PlotInput;","import 'antd/dist/antd.less';\r\nimport './App.css';\r\nimport {useState, useEffect} from 'react';\r\nimport {Row, Col} from 'antd';\r\nimport PlotSpectrum from \"./PlotSpectrum\";\r\nimport PlotInput from \"./PlotInput\";\r\n\r\nfunction App() {\r\n    const [statePlotData, setPlotData] = useState({\r\n        height: Math.min(window.innerWidth * 0.8 * 2 / 3, 400),\r\n        width: Math.min(window.innerWidth * 0.8, 600),\r\n        specA: {},\r\n        specB: {}\r\n    })\r\n    useEffect(() => {\r\n        if (window.innerWidth >= 768) {\r\n            setPlotData({\r\n                height: Math.min(window.innerWidth * 0.8 * 2 / 3 * 2 / 3, 400),\r\n                width: Math.min(window.innerWidth * 0.8 * 2 / 3, 600),\r\n                specA: {},\r\n                specB: {}\r\n            })\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Row justify={\"center\"}\r\n                 style={{\"boxShadow\": \"0 2px 4px 0 rgba(0, 0, 0, 0.2)\"}}>\r\n                <h2>Spectra Visualizer</h2>\r\n            </Row>\r\n            <br/>\r\n            <Row justify={\"center\"} align={\"middle\"}>\r\n                <Col md={6} sm={23}>\r\n                    <PlotInput stateData={statePlotData} setData={setPlotData}/>\r\n                </Col>\r\n                <Col md={16} sm={23}>\r\n                    <Row justify={\"center\"} align={\"middle\"}>\r\n                        <PlotSpectrum data={statePlotData}/>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}