{"version":3,"sources":["components/SpectrumInput.js","components/PlotSpectrum.jsx","components/App.js","reportWebVitals.js","index.js"],"names":["props","justify","value","stateSpectrum","precursorMZ","onChange","e","setSpectrum","target","style","width","TextArea","rows","peaks","PlotSpectrum","refPlot","useRef","precursorMzA","parseFloat","precursorMzB","peaksA","peaksB","funcCleanPeaks","peaks_clean","split","peak_array","filter","trim","length","map","isNaN","push","funcNormalizeSpec","intensityMax","Math","max","apply","p","useEffect","peaksCleanA","current","then","Plotly","peaksCleanB","plotComparisonSpec","spectrumUp","spectrumDown","plotAllPeaks","peak","x0","x1","y0","y1","line","color","type","xMax","yMin","yMax","data","x","y","hovertemplate","showlegend","mode","hoverlabel","bgcolor","marker","size","dash","layout","xaxis","title","text","range","yaxis","hovermode","shapes","margin","l","r","b","t","pad","height","newPlot","responsive","scrollZoom","displayModeBar","ref","App","useState","stateSpectrum1","setSpectrum1","stateSpectrum2","setSpectrum2","console","log","span","SpectrumInput","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.feae40a7.chunk.js","sourcesContent":["import {Row, Col, Button, Input} from 'antd';\r\n\r\n\r\nexport default (props) => {\r\n    return <>\r\n        <Row justify={\"left\"}>\r\n            Precursor m/z:\r\n            <Input\r\n                value={props.stateSpectrum.precursorMZ}\r\n                onChange={(e) => props.setSpectrum({...props.stateSpectrum, precursorMZ: e.target.value})}\r\n                style={{width: \"100px\"}}/>\r\n        </Row>\r\n        <Row justify={\"left\"}>\r\n            Peaks\r\n            <Input.TextArea\r\n                rows=\"10\"\r\n                value={props.stateSpectrum.peaks}\r\n                onChange={(e) => props.setSpectrum({...props.stateSpectrum, peaks: e.target.value})}/>\r\n        </Row>\r\n    </>\r\n}\r\n\r\n","import React, {useEffect, useRef} from 'react';\r\n\r\nconst PlotSpectrum = (props) => {\r\n    const refPlot = useRef(null)\r\n    const precursorMzA = parseFloat(props.precursorMzA)\r\n    const precursorMzB = parseFloat(props.precursorMzB)\r\n    const peaksA = props.peaksA\r\n    const peaksB = props.peaksB\r\n\r\n    const funcCleanPeaks = (peaks) => {\r\n        if (peaks) {\r\n            let peaks_clean = []\r\n            for (let peak of peaks.split(\"\\n\")) {\r\n                let peak_array = peak.split(/(\\s+)/).filter(e => e.trim().length > 0)\r\n                peak_array = peak_array.map(e => parseFloat(e)).filter(e => !isNaN(e))\r\n                if (peak_array.length > 1) {\r\n                    peaks_clean.push(peak_array)\r\n                }\r\n            }\r\n            return peaks_clean\r\n        } else {\r\n            return peaks\r\n        }\r\n    }\r\n\r\n    const funcNormalizeSpec = (peaks) => {\r\n        const intensityMax = Math.max.apply(Math, peaks.map((p) => p[1]))\r\n        if (intensityMax > 0) {\r\n            peaks = peaks.map(p => [p[0], p[1] / intensityMax])\r\n        }\r\n        return peaks\r\n    }\r\n\r\n    useEffect(() => {\r\n        const peaksCleanA = funcCleanPeaks(peaksA)\r\n        if (refPlot.current && peaksCleanA && peaksCleanA.length > 0) {\r\n            import('plotly.js').then(Plotly => {\r\n                //console.log(spectrum, precursor_mz)\r\n                const peaksCleanB = funcCleanPeaks(peaksB)\r\n                let plotComparisonSpec = false\r\n                if (peaksCleanB && peaksCleanB.length > 0) {\r\n                    plotComparisonSpec = true\r\n                }\r\n                let plotAllPeaks = []\r\n                let spectrumUp, spectrumDown\r\n\r\n                // Normalize spectra\r\n                if (plotComparisonSpec) {\r\n                    spectrumUp = funcNormalizeSpec(peaksCleanA)\r\n                    spectrumDown = funcNormalizeSpec(peaksCleanB)\r\n                } else {\r\n                    spectrumUp = peaksCleanA\r\n                }\r\n\r\n                // Add peaks to plot\r\n                for (let peak of spectrumUp) {\r\n                    plotAllPeaks.push({\r\n                        x0: peak[0], x1: peak[0],\r\n                        y0: 0, y1: peak[1],\r\n                        line: {color: \"#8884d8\", width: 1}, type: 'line'\r\n                    })\r\n                }\r\n                let data = [{\r\n                    x: spectrumUp.map((x) => x[0]),\r\n                    y: spectrumUp.map((x) => x[1]),\r\n                    hovertemplate: \"m/z: %{x}<br>\" +\r\n                        \"Abundance: %{y}<extra></extra>\", showlegend: false,\r\n                    mode: 'markers', type: 'scatter',\r\n                    hoverlabel: {bgcolor: \"#FFF\"}, marker: {color: \"#8884d8\", size: 0.1},\r\n                }]\r\n\r\n                if (plotComparisonSpec) {\r\n                    for (let peak of spectrumDown) {\r\n                        plotAllPeaks.push({\r\n                            x0: peak[0], x1: peak[0],\r\n                            y0: 0, y1: -peak[1],\r\n                            line: {color: \"#d88484\", width: 1}, type: 'line'\r\n                        })\r\n                    }\r\n                    data.push(\r\n                        {\r\n                            x: spectrumDown.map((x) => x[0]),\r\n                            y: spectrumDown.map((x) => -x[1]),\r\n                            hovertemplate: \"m/z: %{x}<br>Abundance: %{y}<extra></extra>\",\r\n                            showlegend: false, mode: 'markers', type: 'scatter',\r\n                            hoverlabel: {bgcolor: \"#FFF\"}, marker: {color: \"#8884d8\", size: 0.1},\r\n                        }\r\n                    )\r\n                }\r\n\r\n                // Calculate figure's size\r\n                let xMax, yMin, yMax\r\n                if (plotComparisonSpec) {\r\n                    xMax = 1.05 * Math.max(...(spectrumUp.map(x => x[0])), ...(spectrumDown.map(x => x[0])),\r\n                        precursorMzA, precursorMzB)\r\n                    yMax = 1.2\r\n                    yMin = -1.2\r\n                } else {\r\n                    xMax = 1.05 * Math.max(...(spectrumUp.map(x => x[0])), precursorMzA)\r\n                    yMax = 1.2 * Math.max(...(spectrumUp.map(x => x[0] < precursorMzA - 1 ? x[1] : 0)))\r\n                    yMin = 0\r\n                }\r\n\r\n                // Add precursor ion\r\n                if (!isNaN(precursorMzA)) {\r\n                    plotAllPeaks.push({\r\n                        x0: precursorMzA, x1: precursorMzA,\r\n                        y0: 0, y1: yMax,\r\n                        type: 'line', line: {color: 'black', width: 1, dash: 'dot'}\r\n                    })\r\n                }\r\n                if (!isNaN(precursorMzB)) {\r\n                    plotAllPeaks.push({\r\n                        x0: precursorMzB, x1: precursorMzB,\r\n                        y0: 0, y1: yMin,\r\n                        type: 'line', line: {color: 'black', width: 1, dash: 'dot'}\r\n                    })\r\n                }\r\n\r\n                // Set layout\r\n                let layout = {\r\n                    xaxis: {title: {text: 'm/z',}, range: [0, xMax]},\r\n                    yaxis: {title: {text: 'Abundance',}, range: [yMin, yMax]},\r\n                    hovermode: \"closest\",\r\n                    shapes: plotAllPeaks,\r\n                    margin: {l: 55, r: 10, b: 30, t: 10, pad: 0},\r\n                };\r\n                if (props.height) {\r\n                    layout.height = props.height\r\n                }\r\n                let config = {\r\n                    responsive: true,\r\n                    scrollZoom: true,\r\n                    displayModeBar: false\r\n                }\r\n\r\n                if (refPlot.current) {\r\n                    //console.log(data,layout,config)\r\n                    Plotly.newPlot(refPlot.current, data, layout, config);\r\n                }\r\n            })\r\n        }\r\n    }, [precursorMzA, precursorMzB, peaksA, peaksB])\r\n\r\n    return (\r\n        <div ref={refPlot}/>\r\n    )\r\n}\r\n\r\nexport default PlotSpectrum","import 'antd/dist/antd.less';\r\nimport './App.css';\r\nimport {useState, useEffect} from 'react';\r\nimport {Row, Col, Button} from 'antd';\r\nimport SpectrumInput from \"./SpectrumInput\";\r\nimport PlotSpectrum from \"./PlotSpectrum\";\r\n\r\nfunction App() {\r\n    const [stateSpectrum1, setSpectrum1] = useState({precursorMZ: null, peaks: \"\"});\r\n    const [stateSpectrum2, setSpectrum2] = useState({precursorMZ: null, peaks: \"\"});\r\n\r\n    useEffect(() => {\r\n        if (stateSpectrum1) {\r\n            console.log(stateSpectrum1);\r\n        }\r\n    }, [stateSpectrum1]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Row justify={\"center\"}>\r\n                <Col span={6}>\r\n                    <Row>\r\n                        Input your spectrum here:\r\n                    </Row>\r\n                    <SpectrumInput stateSpectrum={stateSpectrum1} setSpectrum={setSpectrum1}/>\r\n                    <Row>\r\n                        If you want to see a head-to-tail comparison, input another spectrum here:\r\n                    </Row>\r\n                    <SpectrumInput stateSpectrum={stateSpectrum2} setSpectrum={setSpectrum2}/>\r\n                </Col>\r\n                <Col span={16}>\r\n                    <Row justify={\"center\"}>\r\n                        <PlotSpectrum\r\n                            height={400}\r\n                            precursorMzA={stateSpectrum1.precursorMZ}\r\n                            peaksA={stateSpectrum1.peaks}\r\n                            precursorMzB={stateSpectrum2.precursorMZ}\r\n                            peaksB={stateSpectrum2.peaks}/>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}